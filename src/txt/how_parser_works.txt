# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    how_parser_works.txt                               :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mkaratzi <mkaratzi@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/04/14 01:25:18 by mkaratzi          #+#    #+#              #
#    Updated: 2023/04/14 01:52:13 by mkaratzi         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Okay , this is just a prototype. But here is what I was thinking. Essentially,
the only thing in our minishell that seperates two different commands are pipes.
While for example in real shell there are  && and other such ways. Hence , the
parser divides the line taken by readline into segments between seperated by pipes.
Now there is only some  tricky things about that. If a pipe symbol is between two 
quotes (either double or single, they should be recognised as literal, but that
should be easy..... should be). Another case is if a pipe is followed by Another
pipe or empty spaces. Two pipelines together is an or statement in bash and 
two pipes seperated by emppty spaces yield the following error:
/////

bash-3.2$ echo "hello" |  | cat minishell.h 
bash: syntax error near unexpected token `|'

/////

I shall replicate that error, in that case. If (or when) we find other cases in
the future, we may deal with them on their own.